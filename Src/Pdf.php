<?php

namespace Src;

use \Mpdf\Mpdf as PdfMaker;

/**
 * mPDF library wrapper
 * 
 * Manages all what is related with the PDFs
 * 
 * @author Boudouma Mohamed Ilies <medilies.contact@gmail.com>
 */
class Pdf
{
    //********************************************* */
    //          Static properties
    //********************************************* */
    /**
     * The maximum number of records to render per page
     * 
     * @var int
     */
    public static $max_cards_per_page;

    /**
     * The absolute path of the HTML template
     * 
     * @var string
     */
    public static $template_html_path;

    /**
     * The absolute path of the template's stylesheet. Deduced from $html_template
     * 
     * @var string
     */
    public static $template_css_path;

    /**
     * The absolute path to where CSV files generated by instances of this class would be outputed
     * 
     * @var string
     */
    public static $output_folder;

    //********************************************* */
    //          Instance (This pdf) properties
    //********************************************* */
    protected $data_table;
    protected $fields;
    protected $number_of_rows;

    protected $pdf_name;

    protected $pdf;

    function __construct(array $data_table, array $fields, string $pdf_name)
    {
        $this->data_table = $data_table;
        $this->fields = $fields;
        $this->pdf_name = $pdf_name;

        $this->number_of_rows = sizeof($this->data_table);

        // https://mpdf.github.io/reference/mpdf-variables/overview.html
        $this->pdf = new PdfMaker([
            'orientation' => 'P',
            'margin_top' => 30
        ]);

        $this->pdf->autoScriptToLang = true;
        $this->pdf->autoLangToFont = true;
        $this->pdf->SetDirectionality('ltr');

        $output_name = self::$output_folder . "/" . $this->pdf_name;

        $this
            ->setPdfMeta()
            ->SetPdfLayout($this->pdf_name)
            ->render()
            ->pdf->Output($output_name, 'F');

        echo $output_name . PHP_EOL;
    }

    protected function render(): Pdf
    {
        $template = file_get_contents(Self::$template_html_path);
        $stylesheet = file_get_contents(Self::$template_css_path);

        $this->WriteCSS($stylesheet);

        // Preparing for bulk replace
        $all_possible_patterns =  array_map(
            fn (string $key): string => "%VAR_$key%",
            $this->fields
        );

        for ($i = 0; $i < $this->number_of_rows; $i++) {
            $all_row_data = $this->data_table[$i];

            // Bulk replace: an array of strings(pattenrs) replaced with an array of strings(data)
            $substituted_text = str_replace($all_possible_patterns, $all_row_data, $template);

            // Writting the card
            $this->WriteHTML($substituted_text)
                ->checkForAddingNewPage($i);
        }

        return $this;
    }

    /**
     * @return $this
     */
    protected function SetPdfLayout(string $page_header): Pdf
    {
        $this->pdf->SetHTMLHeader($page_header);
        $this->pdf->setFooter('{PAGENO}');
        return $this;
    }

    /**
     * @return $this
     */
    protected function WriteHTML(string $html): Pdf
    {
        $this->pdf->WriteHTML($html, 2);
        return $this;
    }

    /**
     * @return $this
     */
    protected function WriteCSS(string $css): Pdf
    {
        $this->pdf->WriteHTML($css, 1); // The parameter 1 tells mPDF that this is CSS and not HTML
        return $this;
    }

    protected function checkForAddingNewPage($iteration): void
    {
        // avoid empty pages
        if ($iteration + 1 === $this->number_of_rows) {
            return;
        }
        if (($iteration + 1) % Self::$max_cards_per_page === 0) {
            $this->pdf->AddPage();
        }
    }

    /**
     * @return $this
     */
    protected function setPdfMeta(): Pdf
    {
        $this->pdf->SetTitle("Cards");
        $this->pdf->SetAuthor(base64_decode('Qm91ZG91bWEgTW9oYW1lZCBJbGllcw=='));
        $this->pdf->SetCreator(base64_decode('aHR0cHM6Ly9naXRodWIuY29tL21lZGlsaWVz'));
        $this->pdf->SetSubject("pdf cards");
        $this->pdf->SetKeywords("pdf,cards");

        return $this;
    }
}
